/**************************
***** Compiler Parameters *****
***************************
@P EffectName: FXAAShaderEffect
@P   - FXAAEffect.GreenAsLumaKey: 0
@P FXAAEffect.QualityKey: 23
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 64]
@C    MatrixTransform_id73 => SpriteBase.MatrixTransform
cbuffer Globals [Size: 80]
@C    Texture0TexelSize_id15 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id17 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id19 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id21 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id23 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id25 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id27 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id29 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id31 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id33 => Texturing.Texture9TexelSize
***************************
******  Resources    ******
***************************
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    LinearSampler_id44 => Texturing.LinearSampler [Stage: Pixel, Slot: (0-0)]
@R    Texture0_id14 => Texturing.Texture0 [Stage: Pixel, Slot: (0-0)]
@R    Globals => Globals [Stage: Pixel, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    FXAAShader => 5e4b2cff3ff2156e26f8b5dbbdd2bb95
@S    ImageEffectShader => 8064e30cc02e5eb4052f420259dbf05e
@S    SpriteBase => 5a7aa9dfd5b5c7613053f4f66c79ca0d
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
***************************
*****     Stages      *****
***************************
@G    Vertex => 7b8af58dd24be2684728cc0b8599ce6f
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 MatrixTransform_id73;     // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_4_0
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
//
// Initial variable locations:
//   v0.x <- __input__.Position_id72.x; v0.y <- __input__.Position_id72.y; v0.z <- __input__.Position_id72.z; v0.w <- __input__.Position_id72.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o1.x <- <VSMain return value>.TexCoord_id62.x; o1.y <- <VSMain return value>.TexCoord_id62.y; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 367 "C:\Users\Shadow\Desktop\MyGame\Bin\Windows\Debug\win-x64\log\shader_FXAAShaderEffect_f5d9ed77833f18838abf89cd1c17ba77.hlsl"
dp4 o0.x, v0.xyzw, cb0[0].xyzw
dp4 o0.y, v0.xyzw, cb0[1].xyzw
dp4 o0.z, v0.xyzw, cb0[2].xyzw
dp4 o0.w, v0.xyzw, cb0[3].xyzw

#line 371
mov o1.xy, v1.xyxx
ret 
// Approximately 6 instruction slots used
@G    Pixel => c0e7ddf5059cf228e0816de0c29a192a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   float2 Texture0TexelSize_id15;     // Offset:    0 Size:     8
//   float2 Texture1TexelSize_id17;     // Offset:    8 Size:     8 [unused]
//   float2 Texture2TexelSize_id19;     // Offset:   16 Size:     8 [unused]
//   float2 Texture3TexelSize_id21;     // Offset:   24 Size:     8 [unused]
//   float2 Texture4TexelSize_id23;     // Offset:   32 Size:     8 [unused]
//   float2 Texture5TexelSize_id25;     // Offset:   40 Size:     8 [unused]
//   float2 Texture6TexelSize_id27;     // Offset:   48 Size:     8 [unused]
//   float2 Texture7TexelSize_id29;     // Offset:   56 Size:     8 [unused]
//   float2 Texture8TexelSize_id31;     // Offset:   64 Size:     8 [unused]
//   float2 Texture9TexelSize_id33;     // Offset:   72 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// LinearSampler_id44                sampler      NA          NA             s0      1 
// Texture0_id14                     texture  float4          2d             t0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 9
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 135 "C:\Users\Shadow\Desktop\MyGame\Bin\Windows\Debug\win-x64\log\shader_FXAAShaderEffect_f5d9ed77833f18838abf89cd1c17ba77.hlsl"
sample_l r0.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r0.x <- rgbyM.x; r0.y <- rgbyM.y; r0.z <- rgbyM.z; r0.w <- rgbyM.w

#line 136
sample_l_aoffimmi(0,1,0) r1.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)

#line 137
sample_l_aoffimmi(1,0,0) r2.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)

#line 138
sample_l_aoffimmi(0,-1,0) r3.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)

#line 139
sample_l_aoffimmi(-1,0,0) r4.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)

#line 140
max r1.x, r0.w, r1.w  // r1.x <- maxSM

#line 141
min r1.y, r0.w, r1.w  // r1.y <- minSM

#line 142
max r1.x, r1.x, r2.w  // r1.x <- maxESM

#line 143
min r1.y, r1.y, r2.w  // r1.y <- minESM

#line 144
max r1.z, r3.w, r4.w  // r1.z <- maxWN

#line 145
min r2.x, r3.w, r4.w  // r2.x <- minWN

#line 146
max r1.x, r1.x, r1.z  // r1.x <- rangeMax

#line 147
min r1.y, r1.y, r2.x  // r1.y <- rangeMin

#line 148
mul r1.z, r1.x, l(0.063000)  // r1.z <- rangeMaxScaled

#line 149
add r1.x, -r1.y, r1.x  // r1.x <- range

#line 150
max r1.y, r1.z, l(0.031200)  // r1.y <- rangeMaxClamped

#line 154
ge r1.y, r1.x, r1.y
if_nz r1.y
  sample_l_aoffimmi(-1,-1,0) r5.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)

#line 155
  sample_l_aoffimmi(1,1,0) r6.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)

#line 156
  sample_l_aoffimmi(1,-1,0) r7.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)

#line 157
  sample_l_aoffimmi(-1,1,0) r8.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)

#line 158
  add r1.y, r1.w, r3.w  // r1.y <- lumaNS

#line 159
  add r1.z, r2.w, r4.w  // r1.z <- lumaWE

#line 160
  div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x  // r1.x <- subpixRcpRange

#line 161
  add r2.x, r1.z, r1.y  // r2.x <- subpixNSWE

#line 162
  mad r1.y, r0.w, l(-2.000000), r1.y  // r1.y <- edgeHorz1

#line 163
  mad r1.z, r0.w, l(-2.000000), r1.z  // r1.z <- edgeVert1

#line 164
  add r2.y, r6.w, r7.w  // r2.y <- lumaNESE

#line 165
  add r2.z, r5.w, r7.w  // r2.z <- lumaNWNE

#line 166
  mad r3.x, r2.w, l(-2.000000), r2.y  // r3.x <- edgeHorz2

#line 167
  mad r2.z, r3.w, l(-2.000000), r2.z  // r2.z <- edgeVert2

#line 168
  add r3.y, r5.w, r8.w  // r3.y <- lumaNWSW

#line 169
  add r3.z, r6.w, r8.w  // r3.z <- lumaSWSE

#line 170
  mad r1.y, |r1.y|, l(2.000000), |r3.x|  // r1.y <- edgeHorz4

#line 171
  mad r1.z, |r1.z|, l(2.000000), |r2.z|  // r1.z <- edgeVert4

#line 172
  mad r2.z, r4.w, l(-2.000000), r3.y  // r2.z <- edgeHorz3

#line 173
  mad r3.x, r1.w, l(-2.000000), r3.z  // r3.x <- edgeVert3

#line 174
  add r1.y, r1.y, |r2.z|  // r1.y <- edgeHorz

#line 175
  add r1.z, r1.z, |r3.x|  // r1.z <- edgeVert

#line 176
  add r2.y, r2.y, r3.y  // r2.y <- subpixNWSWNESE

#line 178
  ge r1.y, r1.y, r1.z  // r1.y <- horzSpan

#line 179
  mad r1.z, r2.x, l(2.000000), r2.y  // r1.z <- subpixA

#line 181
  movc r2.x, r1.y, r3.w, r4.w  // r2.x <- lumaN

#line 183
  movc r1.w, r1.y, r1.w, r2.w  // r1.w <- lumaS

#line 185
  movc r2.y, r1.y, cb0[0].y, cb0[0].x  // r2.y <- lengthSign

#line 186
  mad r1.z, r1.z, l(0.083333), -r0.w  // r1.z <- subpixB

#line 187
  add r2.z, -r0.w, r2.x  // r2.z <- gradientN

#line 188
  add r2.w, -r0.w, r1.w  // r2.w <- gradientS

#line 189
  add r2.x, r0.w, r2.x  // r2.x <- lumaNN

#line 190
  add r1.w, r0.w, r1.w  // r1.w <- lumaSS

#line 191
  ge r3.x, |r2.z|, |r2.w|  // r3.x <- pairN

#line 192
  max r2.z, |r2.w|, |r2.z|  // r2.z <- gradient

#line 194
  movc r2.y, r3.x, -r2.y, r2.y

#line 195
  mul_sat r1.x, r1.x, |r1.z|  // r1.x <- subpixC

#line 200
  and r1.z, r1.y, cb0[0].x  // r1.z <- offNP.x

#line 201
  movc r2.w, r1.y, l(0), cb0[0].y  // r2.w <- offNP.y

#line 205
  mad r3.yz, r2.yyyy, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx  // r3.y <- posB.x; r3.z <- posB.y

#line 203
  movc r3.y, r1.y, v1.x, r3.y

#line 205
  movc r3.z, r1.y, r3.z, v1.y

#line 207
  add r4.x, -r1.z, r3.y  // r4.x <- posN.x

#line 208
  add r4.y, -r2.w, r3.z  // r4.y <- posN.y

#line 210
  add r5.x, r1.z, r3.y  // r5.x <- posP.x

#line 211
  add r5.y, r2.w, r3.z  // r5.y <- posP.y

#line 212
  mad r3.y, r1.x, l(-2.000000), l(3.000000)  // r3.y <- subpixD

#line 213
  sample_l r6.xyzw, r4.xyxx, t0.xyzw, s0, l(0.000000)

#line 214
  mul r1.x, r1.x, r1.x  // r1.x <- subpixE

#line 215
  sample_l r7.xyzw, r5.xyxx, t0.xyzw, s0, l(0.000000)

#line 217
  movc r1.w, r3.x, r2.x, r1.w  // r1.w <- lumaNN

#line 218
  mul r2.x, r2.z, l(0.250000)  // r2.x <- gradientScaled

#line 219
  mad r2.z, -r1.w, l(0.500000), r0.w  // r2.z <- lumaMM

#line 220
  mul r1.x, r1.x, r3.y  // r1.x <- subpixF

#line 221
  lt r2.z, r2.z, l(0.000000)  // r2.z <- lumaMLTZero

#line 222
  mad r3.y, -r1.w, l(0.500000), r6.w  // r3.y <- lumaEndN

#line 223
  mad r3.x, -r1.w, l(0.500000), r7.w  // r3.x <- lumaEndP

#line 225
  ge r4.zw, |r3.yyyx|, r2.xxxx  // r4.z <- doneN; r4.w <- doneP

#line 227
  mad r5.z, -r1.z, l(1.500000), r4.x  // r5.z <- posN.x
  movc r5.z, r4.z, r4.x, r5.z

#line 229
  mad r4.x, -r2.w, l(1.500000), r4.y  // r4.x <- posN.y
  movc r5.w, r4.z, r4.y, r4.x  // r5.w <- posN.y

#line 230
  not r4.xy, r4.zwzz
  or r4.x, r4.y, r4.x  // r4.x <- doneNP

#line 232
  mad r4.y, r1.z, l(1.500000), r5.x  // r4.y <- posP.x
  movc r6.x, r4.w, r5.x, r4.y  // r6.x <- posP.x

#line 234
  mad r4.y, r2.w, l(1.500000), r5.y  // r4.y <- posP.y
  movc r6.y, r4.w, r5.y, r4.y  // r6.y <- posP.y

#line 235
  if_nz r4.x

#line 237
    if_z r4.z

#line 238
      sample_l r7.xyzw, r5.zwzz, t0.wxyz, s0, l(0.000000)
    else 
      mov r7.x, r3.y
    endif 

#line 239
    if_z r4.w

#line 240
      sample_l r3.xyzw, r6.xyxx, t0.wxyz, s0, l(0.000000)
    endif   // r3.x <- lumaEndP

#line 242
    mad r4.x, -r1.w, l(0.500000), r7.x  // r4.x <- lumaEndN
    movc r3.y, r4.z, r7.x, r4.x  // r3.y <- lumaEndN

#line 244
    mad r4.x, -r1.w, l(0.500000), r3.x  // r4.x <- lumaEndP
    movc r3.x, r4.w, r3.x, r4.x  // r3.x <- lumaEndP

#line 246
    ge r4.xy, |r3.yxyy|, r2.xxxx  // r4.x <- doneN; r4.y <- doneP

#line 248
    mad r4.z, -r1.z, l(2.000000), r5.z  // r4.z <- posN.x
    movc r5.z, r4.x, r5.z, r4.z  // r5.z <- posN.x

#line 250
    mad r4.z, -r2.w, l(2.000000), r5.w  // r4.z <- posN.y
    movc r5.w, r4.x, r5.w, r4.z  // r5.w <- posN.y

#line 251
    not r4.zw, r4.xxxy
    or r4.z, r4.w, r4.z  // r4.z <- doneNP

#line 253
    mad r4.w, r1.z, l(2.000000), r6.x  // r4.w <- posP.x
    movc r6.x, r4.y, r6.x, r4.w  // r6.x <- posP.x

#line 255
    mad r4.w, r2.w, l(2.000000), r6.y  // r4.w <- posP.y
    movc r6.y, r4.y, r6.y, r4.w  // r6.y <- posP.y

#line 256
    if_nz r4.z

#line 258
      if_z r4.x

#line 259
        sample_l r7.xyzw, r5.zwzz, t0.wxyz, s0, l(0.000000)
      else 
        mov r7.x, r3.y
      endif 

#line 260
      if_z r4.y

#line 261
        sample_l r3.xyzw, r6.xyxx, t0.wxyz, s0, l(0.000000)
      endif   // r3.x <- lumaEndP

#line 263
      mad r4.z, -r1.w, l(0.500000), r7.x  // r4.z <- lumaEndN
      movc r3.y, r4.x, r7.x, r4.z  // r3.y <- lumaEndN

#line 265
      mad r4.x, -r1.w, l(0.500000), r3.x  // r4.x <- lumaEndP
      movc r3.x, r4.y, r3.x, r4.x  // r3.x <- lumaEndP

#line 267
      ge r4.xy, |r3.yxyy|, r2.xxxx  // r4.x <- doneN

#line 269
      mad r4.z, -r1.z, l(2.000000), r5.z  // r4.z <- posN.x
      movc r5.z, r4.x, r5.z, r4.z  // r5.z <- posN.x

#line 271
      mad r4.z, -r2.w, l(2.000000), r5.w  // r4.z <- posN.y
      movc r5.w, r4.x, r5.w, r4.z  // r5.w <- posN.y

#line 272
      not r4.zw, r4.xxxy
      or r4.z, r4.w, r4.z  // r4.z <- doneNP

#line 274
      mad r4.w, r1.z, l(2.000000), r6.x  // r4.w <- posP.x
      movc r6.x, r4.y, r6.x, r4.w  // r6.x <- posP.x

#line 276
      mad r4.w, r2.w, l(2.000000), r6.y  // r4.w <- posP.y
      movc r6.y, r4.y, r6.y, r4.w  // r6.y <- posP.y

#line 277
      if_nz r4.z

#line 279
        if_z r4.x

#line 280
          sample_l r7.xyzw, r5.zwzz, t0.wxyz, s0, l(0.000000)
        else 
          mov r7.x, r3.y
        endif 

#line 281
        if_z r4.y

#line 282
          sample_l r3.xyzw, r6.xyxx, t0.wxyz, s0, l(0.000000)
        endif   // r3.x <- lumaEndP

#line 284
        mad r4.z, -r1.w, l(0.500000), r7.x  // r4.z <- lumaEndN
        movc r3.y, r4.x, r7.x, r4.z  // r3.y <- lumaEndN

#line 286
        mad r4.x, -r1.w, l(0.500000), r3.x  // r4.x <- lumaEndP
        movc r3.x, r4.y, r3.x, r4.x  // r3.x <- lumaEndP

#line 288
        ge r4.xy, |r3.yxyy|, r2.xxxx  // r4.x <- doneN

#line 290
        mad r4.z, -r1.z, l(2.000000), r5.z  // r4.z <- posN.x
        movc r5.z, r4.x, r5.z, r4.z  // r5.z <- posN.x

#line 292
        mad r4.z, -r2.w, l(2.000000), r5.w  // r4.z <- posN.y
        movc r5.w, r4.x, r5.w, r4.z  // r5.w <- posN.y

#line 293
        not r4.zw, r4.xxxy
        or r4.z, r4.w, r4.z  // r4.z <- doneNP

#line 295
        mad r4.w, r1.z, l(2.000000), r6.x  // r4.w <- posP.x
        movc r6.x, r4.y, r6.x, r4.w  // r6.x <- posP.x

#line 297
        mad r4.w, r2.w, l(2.000000), r6.y  // r4.w <- posP.y
        movc r6.y, r4.y, r6.y, r4.w  // r6.y <- posP.y

#line 298
        if_nz r4.z

#line 300
          if_z r4.x

#line 301
            sample_l r7.xyzw, r5.zwzz, t0.wxyz, s0, l(0.000000)
          else 
            mov r7.x, r3.y
          endif 

#line 302
          if_z r4.y

#line 303
            sample_l r3.xyzw, r6.xyxx, t0.wxyz, s0, l(0.000000)
          endif   // r3.x <- lumaEndP

#line 305
          mad r3.z, -r1.w, l(0.500000), r7.x  // r3.z <- lumaEndN
          movc r3.y, r4.x, r7.x, r3.z  // r3.y <- lumaEndN

#line 307
          mad r1.w, -r1.w, l(0.500000), r3.x  // r1.w <- lumaEndP
          movc r3.x, r4.y, r3.x, r1.w  // r3.x <- lumaEndP

#line 309
          ge r3.zw, |r3.yyyx|, r2.xxxx  // r3.z <- doneN; r3.w <- doneP

#line 311
          mad r1.w, -r1.z, l(8.000000), r5.z  // r1.w <- posN.x
          movc r5.z, r3.z, r5.z, r1.w  // r5.z <- posN.x

#line 313
          mad r1.w, -r2.w, l(8.000000), r5.w  // r1.w <- posN.y
          movc r5.w, r3.z, r5.w, r1.w  // r5.w <- posN.y

#line 316
          mad r1.z, r1.z, l(8.000000), r6.x  // r1.z <- posP.x
          movc r6.x, r3.w, r6.x, r1.z  // r6.x <- posP.x

#line 318
          mad r1.z, r2.w, l(8.000000), r6.y  // r1.z <- posP.y
          movc r6.y, r3.w, r6.y, r1.z  // r6.y <- posP.y

#line 319
        endif 

#line 320
      endif 

#line 321
    endif 

#line 322
  endif 

#line 323
  add r1.z, -r5.z, v1.x  // r1.z <- dstN

#line 324
  add r1.w, r6.x, -v1.x  // r1.w <- dstP

#line 326
  add r2.x, -r5.w, v1.y  // r2.x <- dstN
  movc r1.z, r1.y, r1.z, r2.x  // r1.z <- dstN

#line 328
  add r2.x, r6.y, -v1.y  // r2.x <- dstP
  movc r1.w, r1.y, r1.w, r2.x  // r1.w <- dstP

#line 331
  lt r2.xw, r3.yyyx, l(0.000000, 0.000000, 0.000000, 0.000000)

#line 330
  add r3.x, r1.z, r1.w  // r3.x <- spanLength

#line 331
  ine r2.xz, r2.zzzz, r2.xxwx  // r2.x <- goodSpanN; r2.z <- goodSpanP

#line 332
  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x  // r2.w <- spanLengthRcp

#line 333
  lt r3.x, r1.z, r1.w  // r3.x <- directionN

#line 334
  min r1.z, r1.w, r1.z  // r1.z <- dst

#line 335
  movc r1.w, r3.x, r2.x, r2.z  // r1.w <- goodSpan

#line 336
  mul r1.x, r1.x, r1.x  // r1.x <- subpixG

#line 337
  mad r1.z, r1.z, -r2.w, l(0.500000)  // r1.z <- pixelOffset

#line 338
  mul r1.x, r1.x, l(0.750000)  // r1.x <- subpixH

#line 339
  and r1.z, r1.z, r1.w  // r1.z <- pixelOffsetGood

#line 340
  max r1.x, r1.x, r1.z  // r1.x <- pixelOffsetSubpix

#line 344
  mad r1.xz, r1.xxxx, r2.yyyy, v1.xxyx  // r1.x <- posM.x; r1.z <- posM.y

#line 342
  movc r2.x, r1.y, v1.x, r1.x  // r2.x <- posM.x

#line 344
  movc r2.y, r1.y, r1.z, v1.y  // r2.y <- posM.y

#line 345
  sample_l r1.xyzw, r2.xyxx, t0.xyzw, s0, l(0.000000)  // r1.x <- <FxaaPixelShader_id4 return value>.x; r1.y <- <FxaaPixelShader_id4 return value>.y; r1.z <- <FxaaPixelShader_id4 return value>.z
  mov r0.xyz, r1.xyzx  // r0.x <- <FxaaPixelShader_id4 return value>.x; r0.y <- <FxaaPixelShader_id4 return value>.y; r0.z <- <FxaaPixelShader_id4 return value>.z
endif 

#line 360
mov o0.xyzw, r0.xyzw
ret 
// Approximately 210 instruction slots used
***************************
*************************/
struct PS_STREAMS 
{
    float2 TexCoord_id62;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_STREAMS 
{
    float4 Position_id72;
    float2 TexCoord_id62;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_INPUT 
{
    float4 Position_id72 : POSITION;
    float2 TexCoord_id62 : TEXCOORD0;
};
cbuffer PerDraw 
{
    float4x4 MatrixTransform_id73;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
float FxaaLuma_id3(float4 rgba)
{
    return rgba.w;
}
float4 FxaaPixelShader_id4(float2 pos, float4 fxaaConsolePosPos, Texture2D tex, Texture2D fxaaConsole360TexExpBiasNegOne, Texture2D fxaaConsole360TexExpBiasNegTwo, float2 fxaaQualityRcpFrame, float4 fxaaConsoleRcpFrameOpt, float4 fxaaConsoleRcpFrameOpt2, float4 fxaaConsole360RcpFrameOpt2, float fxaaQualitySubpix, float fxaaQualityEdgeThreshold, float fxaaQualityEdgeThresholdMin, float fxaaConsoleEdgeSharpness, float fxaaConsoleEdgeThreshold, float fxaaConsoleEdgeThresholdMin, float4 fxaaConsole360ConstDir)
{
    float2 posM;
    posM.x = pos.x;
    posM.y = pos.y;
    float4 rgbyM = tex.SampleLevel(LinearSampler_id44, posM, 0.0);
    float lumaS = FxaaLuma_id3(tex.SampleLevel(LinearSampler_id44, posM, 0.0, int2(0, 1)));
    float lumaE = FxaaLuma_id3(tex.SampleLevel(LinearSampler_id44, posM, 0.0, int2(1, 0)));
    float lumaN = FxaaLuma_id3(tex.SampleLevel(LinearSampler_id44, posM, 0.0, int2(0, -1)));
    float lumaW = FxaaLuma_id3(tex.SampleLevel(LinearSampler_id44, posM, 0.0, int2(-1, 0)));
    float maxSM = max(lumaS, rgbyM.w);
    float minSM = min(lumaS, rgbyM.w);
    float maxESM = max(lumaE, maxSM);
    float minESM = min(lumaE, minSM);
    float maxWN = max(lumaN, lumaW);
    float minWN = min(lumaN, lumaW);
    float rangeMax = max(maxWN, maxESM);
    float rangeMin = min(minWN, minESM);
    float rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;
    float range = rangeMax - rangeMin;
    float rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);
    bool earlyExit = range < rangeMaxClamped;
    if (earlyExit)
        return rgbyM;
    float lumaNW = FxaaLuma_id3(tex.SampleLevel(LinearSampler_id44, posM, 0.0, int2(-1, -1)));
    float lumaSE = FxaaLuma_id3(tex.SampleLevel(LinearSampler_id44, posM, 0.0, int2(1, 1)));
    float lumaNE = FxaaLuma_id3(tex.SampleLevel(LinearSampler_id44, posM, 0.0, int2(1, -1)));
    float lumaSW = FxaaLuma_id3(tex.SampleLevel(LinearSampler_id44, posM, 0.0, int2(-1, 1)));
    float lumaNS = lumaN + lumaS;
    float lumaWE = lumaW + lumaE;
    float subpixRcpRange = 1.0 / range;
    float subpixNSWE = lumaNS + lumaWE;
    float edgeHorz1 = (-2.0 * rgbyM.w) + lumaNS;
    float edgeVert1 = (-2.0 * rgbyM.w) + lumaWE;
    float lumaNESE = lumaNE + lumaSE;
    float lumaNWNE = lumaNW + lumaNE;
    float edgeHorz2 = (-2.0 * lumaE) + lumaNESE;
    float edgeVert2 = (-2.0 * lumaN) + lumaNWNE;
    float lumaNWSW = lumaNW + lumaSW;
    float lumaSWSE = lumaSW + lumaSE;
    float edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);
    float edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);
    float edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;
    float edgeVert3 = (-2.0 * lumaS) + lumaSWSE;
    float edgeHorz = abs(edgeHorz3) + edgeHorz4;
    float edgeVert = abs(edgeVert3) + edgeVert4;
    float subpixNWSWNESE = lumaNWSW + lumaNESE;
    float lengthSign = fxaaQualityRcpFrame.x;
    bool horzSpan = edgeHorz >= edgeVert;
    float subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;
    if (!horzSpan)
        lumaN = lumaW;
    if (!horzSpan)
        lumaS = lumaE;
    if (horzSpan)
        lengthSign = fxaaQualityRcpFrame.y;
    float subpixB = (subpixA * (1.0 / 12.0)) - rgbyM.w;
    float gradientN = lumaN - rgbyM.w;
    float gradientS = lumaS - rgbyM.w;
    float lumaNN = lumaN + rgbyM.w;
    float lumaSS = lumaS + rgbyM.w;
    bool pairN = abs(gradientN) >= abs(gradientS);
    float gradient = max(abs(gradientN), abs(gradientS));
    if (pairN)
        lengthSign = -lengthSign;
    float subpixC = saturate(abs(subpixB) * subpixRcpRange);
    float2 posB;
    posB.x = posM.x;
    posB.y = posM.y;
    float2 offNP;
    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;
    offNP.y = (horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;
    if (!horzSpan)
        posB.x += lengthSign * 0.5;
    if (horzSpan)
        posB.y += lengthSign * 0.5;
    float2 posN;
    posN.x = posB.x - offNP.x * 1.0;
    posN.y = posB.y - offNP.y * 1.0;
    float2 posP;
    posP.x = posB.x + offNP.x * 1.0;
    posP.y = posB.y + offNP.y * 1.0;
    float subpixD = ((-2.0) * subpixC) + 3.0;
    float lumaEndN = FxaaLuma_id3(tex.SampleLevel(LinearSampler_id44, posN, 0.0));
    float subpixE = subpixC * subpixC;
    float lumaEndP = FxaaLuma_id3(tex.SampleLevel(LinearSampler_id44, posP, 0.0));
    if (!pairN)
        lumaNN = lumaSS;
    float gradientScaled = gradient * 1.0 / 4.0;
    float lumaMM = rgbyM.w - lumaNN * 0.5;
    float subpixF = subpixD * subpixE;
    bool lumaMLTZero = lumaMM < 0.0;
    lumaEndN -= lumaNN * 0.5;
    lumaEndP -= lumaNN * 0.5;
    bool doneN = abs(lumaEndN) >= gradientScaled;
    bool doneP = abs(lumaEndP) >= gradientScaled;
    if (!doneN)
        posN.x -= offNP.x * 1.5;
    if (!doneN)
        posN.y -= offNP.y * 1.5;
    bool doneNP = (!doneN) || (!doneP);
    if (!doneP)
        posP.x += offNP.x * 1.5;
    if (!doneP)
        posP.y += offNP.y * 1.5;
    if (doneNP)
    {
        if (!doneN)
            lumaEndN = FxaaLuma_id3(tex.SampleLevel(LinearSampler_id44, posN.xy, 0.0));
        if (!doneP)
            lumaEndP = FxaaLuma_id3(tex.SampleLevel(LinearSampler_id44, posP.xy, 0.0));
        if (!doneN)
            lumaEndN = lumaEndN - lumaNN * 0.5;
        if (!doneP)
            lumaEndP = lumaEndP - lumaNN * 0.5;
        doneN = abs(lumaEndN) >= gradientScaled;
        doneP = abs(lumaEndP) >= gradientScaled;
        if (!doneN)
            posN.x -= offNP.x * 2.0;
        if (!doneN)
            posN.y -= offNP.y * 2.0;
        doneNP = (!doneN) || (!doneP);
        if (!doneP)
            posP.x += offNP.x * 2.0;
        if (!doneP)
            posP.y += offNP.y * 2.0;
        if (doneNP)
        {
            if (!doneN)
                lumaEndN = FxaaLuma_id3(tex.SampleLevel(LinearSampler_id44, posN.xy, 0.0));
            if (!doneP)
                lumaEndP = FxaaLuma_id3(tex.SampleLevel(LinearSampler_id44, posP.xy, 0.0));
            if (!doneN)
                lumaEndN = lumaEndN - lumaNN * 0.5;
            if (!doneP)
                lumaEndP = lumaEndP - lumaNN * 0.5;
            doneN = abs(lumaEndN) >= gradientScaled;
            doneP = abs(lumaEndP) >= gradientScaled;
            if (!doneN)
                posN.x -= offNP.x * 2.0;
            if (!doneN)
                posN.y -= offNP.y * 2.0;
            doneNP = (!doneN) || (!doneP);
            if (!doneP)
                posP.x += offNP.x * 2.0;
            if (!doneP)
                posP.y += offNP.y * 2.0;
            if (doneNP)
            {
                if (!doneN)
                    lumaEndN = FxaaLuma_id3(tex.SampleLevel(LinearSampler_id44, posN.xy, 0.0));
                if (!doneP)
                    lumaEndP = FxaaLuma_id3(tex.SampleLevel(LinearSampler_id44, posP.xy, 0.0));
                if (!doneN)
                    lumaEndN = lumaEndN - lumaNN * 0.5;
                if (!doneP)
                    lumaEndP = lumaEndP - lumaNN * 0.5;
                doneN = abs(lumaEndN) >= gradientScaled;
                doneP = abs(lumaEndP) >= gradientScaled;
                if (!doneN)
                    posN.x -= offNP.x * 2.0;
                if (!doneN)
                    posN.y -= offNP.y * 2.0;
                doneNP = (!doneN) || (!doneP);
                if (!doneP)
                    posP.x += offNP.x * 2.0;
                if (!doneP)
                    posP.y += offNP.y * 2.0;
                if (doneNP)
                {
                    if (!doneN)
                        lumaEndN = FxaaLuma_id3(tex.SampleLevel(LinearSampler_id44, posN.xy, 0.0));
                    if (!doneP)
                        lumaEndP = FxaaLuma_id3(tex.SampleLevel(LinearSampler_id44, posP.xy, 0.0));
                    if (!doneN)
                        lumaEndN = lumaEndN - lumaNN * 0.5;
                    if (!doneP)
                        lumaEndP = lumaEndP - lumaNN * 0.5;
                    doneN = abs(lumaEndN) >= gradientScaled;
                    doneP = abs(lumaEndP) >= gradientScaled;
                    if (!doneN)
                        posN.x -= offNP.x * 8.0;
                    if (!doneN)
                        posN.y -= offNP.y * 8.0;
                    doneNP = (!doneN) || (!doneP);
                    if (!doneP)
                        posP.x += offNP.x * 8.0;
                    if (!doneP)
                        posP.y += offNP.y * 8.0;
                }
            }
        }
    }
    float dstN = posM.x - posN.x;
    float dstP = posP.x - posM.x;
    if (!horzSpan)
        dstN = posM.y - posN.y;
    if (!horzSpan)
        dstP = posP.y - posM.y;
    bool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;
    float spanLength = (dstP + dstN);
    bool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;
    float spanLengthRcp = 1.0 / spanLength;
    bool directionN = dstN < dstP;
    float dst = min(dstN, dstP);
    bool goodSpan = directionN ? goodSpanN : goodSpanP;
    float subpixG = subpixF * subpixF;
    float pixelOffset = (dst * (-spanLengthRcp)) + 0.5;
    float subpixH = subpixG * fxaaQualitySubpix;
    float pixelOffsetGood = goodSpan ? pixelOffset : 0.0;
    float pixelOffsetSubpix = max(pixelOffsetGood, subpixH);
    if (!horzSpan)
        posM.x += pixelOffsetSubpix * lengthSign;
    if (horzSpan)
        posM.y += pixelOffsetSubpix * lengthSign;
    return float4(tex.SampleLevel(LinearSampler_id44, posM, 0.0).xyz, rgbyM.w);
}
float4 Shading_id5(inout PS_STREAMS streams)
{
    float2 texCoord = streams.TexCoord_id62;
    float2 screenPixelRatio = Texture0TexelSize_id15;
    return FxaaPixelShader_id4(texCoord, 0, Texture0_id14, Texture0_id14, Texture0_id14, screenPixelRatio, 0, 0, 0, 0.75, 0.063, 0.0312, 8, 0.125, 0.05, 0);
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ColorTarget_id2 = Shading_id5(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id72 = __input__.Position_id72;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ShadingPosition_id0 = mul(streams.Position_id72, MatrixTransform_id73);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    __output__.TexCoord_id62 = streams.TexCoord_id62;
    return __output__;
}
